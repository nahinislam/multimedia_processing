# -*- coding: utf-8 -*-
"""Assignment 2_Nahin.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/18-17_V84aNIKyq8kuEFEmrjAInqizAmk
"""

# Install required packages
!pip install numpy pandas matplotlib scikit-learn

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from matplotlib.colors import ListedColormap
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import Perceptron, LogisticRegression
from sklearn.tree import DecisionTreeClassifier
from sklearn.svm import SVC
from sklearn.neighbors import KNeighborsClassifier
from sklearn.ensemble import RandomForestClassifier
from sklearn.naive_bayes import GaussianNB
from sklearn.pipeline import make_pipeline

# Load the Iris dataset
from sklearn import datasets
iris = datasets.load_iris()
X = iris.data[:, [2, 3]]  # Petal length and width
y = iris.target

# Split into training and test sets (80% train, 20% test)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=1, stratify=y)

# Standardize features (important for ML models)
sc = StandardScaler()
X_train_std = sc.fit_transform(X_train)
X_test_std = sc.transform(X_test)

ppn = Perceptron(max_iter=40, eta0=0.1, random_state=1)
ppn.fit(X_train_std, y_train)

y_pred = ppn.predict(X_test_std)
print(f"Perceptron Accuracy: {np.mean(y_pred == y_test) * 100:.2f}%")

lr = LogisticRegression(C=100.0, random_state=1)
lr.fit(X_train_std, y_train)

y_pred = lr.predict(X_test_std)
print(f"Logistic Regression Accuracy: {np.mean(y_pred == y_test) * 100:.2f}%")

tree = DecisionTreeClassifier(criterion='gini', max_depth=4, random_state=1)
tree.fit(X_train, y_train)

y_pred = tree.predict(X_test)
print(f"Decision Tree Accuracy: {np.mean(y_pred == y_test) * 100:.2f}%")

svm = SVC(kernel='linear', C=1.0, random_state=1)
svm.fit(X_train_std, y_train)

y_pred = svm.predict(X_test_std)
print(f"SVM Accuracy: {np.mean(y_pred == y_test) * 100:.2f}%")

knn = KNeighborsClassifier(n_neighbors=5, metric='minkowski', p=2)
knn.fit(X_train_std, y_train)

y_pred = knn.predict(X_test_std)
print(f"k-NN Accuracy: {np.mean(y_pred == y_test) * 100:.2f}%")

forest = RandomForestClassifier(n_estimators=25, random_state=1)
forest.fit(X_train, y_train)

y_pred = forest.predict(X_test)
print(f"Random Forest Accuracy: {np.mean(y_pred == y_test) * 100:.2f}%")

nb = GaussianNB()
nb.fit(X_train, y_train)

y_pred = nb.predict(X_test)
print(f"Naive Bayes Accuracy: {np.mean(y_pred == y_test) * 100:.2f}%")

import os
from google.colab import files

# Ensure the folder exists
os.makedirs("images", exist_ok=True)

# Function to plot and save decision boundaries
def plot_and_save(X, y, classifier, filename):
    plt.figure()

    # Define marker and color styles
    markers = ('s', 'x', 'o', '^', 'v')
    colors = ('red', 'blue', 'lightgreen', 'gray', 'cyan')
    cmap = ListedColormap(colors[:len(np.unique(y))])

    # Plot decision surface
    x1_min, x1_max = X[:, 0].min() - 1, X[:, 0].max() + 1
    x2_min, x2_max = X[:, 1].min() - 1, X[:, 1].max() + 1
    xx1, xx2 = np.meshgrid(np.arange(x1_min, x1_max, 0.02),
                           np.arange(x2_min, x2_max, 0.02))
    Z = classifier.predict(np.array([xx1.ravel(), xx2.ravel()]).T)
    Z = Z.reshape(xx1.shape)

    plt.contourf(xx1, xx2, Z, alpha=0.3, cmap=cmap)
    plt.scatter(X[:, 0], X[:, 1], c=y, marker='o', edgecolor='black')
    plt.xlabel('Feature 1')
    plt.ylabel('Feature 2')
    plt.title(classifier.__class__.__name__)

    # Save the figure
    plt.savefig(f"images/{filename}.png", dpi=300)
    plt.show()

# Generate and save figures for each classifier
plot_and_save(X_train_std, y_train, ppn, "Perceptron")
plot_and_save(X_train_std, y_train, lr, "Logistic_Regression")
plot_and_save(X_train, y_train, tree, "Decision_Tree")
plot_and_save(X_train_std, y_train, svm, "SVM")
plot_and_save(X_train_std, y_train, knn, "KNN")
plot_and_save(X_train, y_train, forest, "Random_Forest")
plot_and_save(X_train, y_train, nb, "Naive_Bayes")

import glob

# Get list of all PNG files
figure_files = glob.glob("images/*.png")

# Download each file
for file in figure_files:
    files.download(file)